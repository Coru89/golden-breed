{{ 'section-tab-accordion.css' | asset_url | stylesheet_tag }}

<script src="{{ 'tab-accordion.js' | asset_url }}" async></script>

{% comment %} {{ 'tab-accordion.js' | asset_url | script_tag: async }} {% endcomment %}

<section class="tab-accordion">
  <div class="tab-accordion__inner page-width">
    <div class="tab-accordion__items">
      {%- for block in section.blocks -%}
        {%- case block.type -%}
          {%- when 'tabaccordion_section' -%}
            {% if forloop.first %}
            <div class="tab-accordion__item">
               {% else %} 
            </div></div><div class="tab-accordion__item">
            {% endif %}
            <div class="tab-accordion__item-header">{{ block.settings.tabaccordion_section_name }}</div>
            {%- when 'table_row' -%}
              {% if prevType == 'tabaccordion_section' %}
                <div class="tab-accordion__content">
              {% endif %}
            <div class="tab-accordion__item-table-row{% if block.settings.header == true %} tab-accordion__item-table-row--header{% endif %}">
              <div class="tab-accordion__item-table-cell">
                {{ block.settings.column_1_data }}
              </div>
              <div class="tab-accordion__item-table-cell">
                {{ block.settings.column_2_data }}
              </div>
            </div>
            {% if forloop.last %}
            </div>
            {% endif %}
        {%- endcase -%}
        {% assign prevType = block.type %}
      {%- endfor -%}
    </div>
    
  </div>     
  
  <div class="tab-accordion__content-desktop">placeholder</div>

</section>



{% schema %}
{
  "name": "Accordion + Tabs",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading"
    }
  ],
  "blocks": [
    {
      "name": "Tab/Accordion Section",
      "type": "tabaccordion_section",
      "settings": [
        {
          "type": "text",
          "id": "tabaccordion_section_name",
          "label": "Tab/Accordion Section Name"
        }
      ]
    },
    {
      "name": "Table Row",
      "type": "table_row",
      "settings": [
        {
          "type": "text",
          "id": "column_1_data",
          "label": "Column 1 Data"
        },
        {
          "type": "text",
          "id": "column_2_data",
          "label": "Column 2 Data"
        },
        {
          "type": "checkbox",
          "id": "header",
          "label": "Header",
          "default": false
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Accordion + Tabs"
    }
  ]
}
{% endschema %}

{% comment %} <script>

  // Get all the accordion headers
let accordionHeaders = document.querySelectorAll('.tab-accordion__item-header');
const desktopContentEl = document.querySelector('.tab-accordion__content-desktop');
if (window.innerWidth > 750) {
  if (accordionHeaders[0] && accordionHeaders[0].nextElementSibling.innerHTML && desktopContentEl) {
    desktopContentEl.innerHTML = accordionHeaders[0].nextElementSibling.innerHTML;
    accordionHeaders[0].classList.add('active');
    accordionHeaders[0].nextElementSibling.classList.add('active');
  }
}


{% comment %} const firstTabCOntent = accordionHeaders[0].nextElementSibling.innerHTML; {% endcomment %}


// Loop through the headers and add an event listener to each one
accordionHeaders.forEach(header => {
  header.addEventListener('click', (e) => {
    // If the screen width is less than 750 pixels (mobile size), toggle the 'active' class on the clicked header and its content element
    if (window.innerWidth < 750) {
      header.classList.toggle('active');
      const content = header.nextElementSibling;
      content.classList.toggle('active');
      {% comment %} if (content.classList.contains('active')) {
        content.style.maxHeight = content.scrollHeight + 'px';
      } else {
        content.style.maxHeight = null;
      } {% endcomment %}

    } else {
        if (desktopContentEl && e.currentTarget) {
          accordionHeaders.forEach(header => {
            header.classList.remove('active');
            const contentEl = header.nextElementSibling;
            contentEl.classList.remove('active');
          });
          const content = header.nextElementSibling;
          content.classList.toggle('active');
          header.classList.toggle('active');
          desktopContentEl.innerHTML = e.currentTarget.nextElementSibling.innerHTML;

        }
    }
  });
});

// Detect if the screen width changes and update the layout accordingly
 {% comment %} window.addEventListener('resize', () => {
  accordionHeaders = document.querySelectorAll('.tab-accordion__item-header');

  let containsActive = false;
  let activeCount = 0; // create a variable to store the count of elements with the "active" class
  
  for (let i = 0; i < accordionHeaders.length; i++) {
    if (accordionHeaders[i].classList.contains("active")) {
      containsActive = true;
      activeCount++; // increment the active count if the current element has the "active" class
    }
  }

  if (window.innerWidth >= 750) {
    if ((accordionHeaders[0] && desktopContentEl) && (containsActive == false || activeCount > 1)) {
      console.log('here');
      accordionHeaders.forEach(header => {
        header.classList.remove('active');
        const contentEl = header.nextElementSibling;
        contentEl.classList.remove('active');
      });
      desktopContentEl.innerHTML = accordionHeaders[0].nextElementSibling.innerHTML;
      accordionHeaders[0].classList.add('active');
      accordionHeaders[0].nextElementSibling.classList.add('active');
    } 
  }
}); {% endcomment %}

// Define the function to be called on resize, wrapped in a throttle function
const handleResize = throttle(() => {
  const accordionHeaders = document.querySelectorAll('.tab-accordion__item-header');
  let containsActive = false;
  let activeCount = 0; // create a variable to store the count of elements with the "active" class

  for (let i = 0; i < accordionHeaders.length; i++) {
    if (accordionHeaders[i].classList.contains("active")) {
      containsActive = true;
      activeCount++; // increment the active count if the current element has the "active" class
    }
  }

  if (window.innerWidth >= 750) {
    if ((accordionHeaders[0] && desktopContentEl) && (containsActive == false || activeCount > 1)) {
      console.log('here');
      accordionHeaders.forEach(header => {
        header.classList.remove('active');
        const contentEl = header.nextElementSibling;
        contentEl.classList.remove('active');
      });
      desktopContentEl.innerHTML = accordionHeaders[0].nextElementSibling.innerHTML;
      accordionHeaders[0].classList.add('active');
      accordionHeaders[0].nextElementSibling.classList.add('active');
    } 
  }
}, 250); // set the throttle time interval to 250 milliseconds

// Add the throttled resize event listener to the window object
window.addEventListener('resize', handleResize);
  
  </script> {% endcomment %}